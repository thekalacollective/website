// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider        = "prisma-client-js"
    previewFeatures = ["referentialIntegrity", "fullTextIndex"]
}

datasource db {
    provider             = "mysql"
    // NOTE: When using postgresql, mysql or sqlserver, uncomment the @db.Text annotations in model Account below
    // Further reading: 
    // https://next-auth.js.org/adapters/prisma#create-the-prisma-schema
    // https://www.prisma.io/docs/reference/api-reference/prisma-schema-reference#string
    url                  = env("DATABASE_URL")
    referentialIntegrity = "prisma"
}

// Necessary for Next auth
model Account {
    id                String  @id @default(cuid())
    userId            String
    type              String
    provider          String
    providerAccountId String
    refresh_token     String? @db.Text
    access_token      String? @db.Text
    expires_at        Int?
    token_type        String?
    scope             String?
    id_token          String? @db.Text
    session_state     String?
    user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([provider, providerAccountId])
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
    id            String    @id @default(cuid())
    name          String?
    email         String?   @unique
    emailVerified DateTime?
    image         String?
    accounts      Account[]
    sessions      Session[]
    role          Role      @default(MEMBER)
    member        Member?
}

enum Role {
    MEMBER
    ADMIN
}

model Member {
    id                    String                 @id @unique
    user                  User                   @relation(fields: [id], references: [id])
    username              String                 @unique
    fullName              String
    dateOfBirth           String
    profilePicture        String?
    location              LocationCity           @relation(fields: [locationCityId], references: [id])
    locationCityId        String
    links                 Json
    email                 String
    tags                  Tag[]
    phoneNumber           String
    yearsOfExperience     Int
    about                 String
    travelPreference      TravelPreference
    services              Service[]
    createdAt             DateTime               @default(now())
    updatedAt             DateTime               @updatedAt
    membershipApplication MembershipApplication?
    responses             SurveyResponse[]
    albums                Album[]
    isFeatured            Boolean                @default(false)

    @@fulltext([fullName])
}

enum TravelPreference {
    BASE
    REGION
    COUNTRY
}

model Tag {
    id      String   @id @default(cuid())
    name    String   @unique
    members Member[]
}

model Service {
    id      String   @id @default(cuid())
    name    String   @unique
    members Member[]
}

model MembershipApplication {
    memberId       String            @id @unique
    member         Member            @relation(fields: [memberId], references: [id], onDelete: Cascade)
    surveyId       String
    surveyResponse SurveyResponse    @relation(fields: [surveyId, memberId], references: [surveyId, memberId])
    createdAt      DateTime          @default(now())
    status         ApplicationStatus @default(PENDING)
    note           String?
}

model Survey {
    id        String           @id @default(cuid())
    title     String
    slug      String           @unique
    schema    Json
    responses SurveyResponse[]
}

model SurveyResponse {
    memberId               String
    member                 Member                  @relation(fields: [memberId], references: [id], onDelete: Cascade)
    surveyId               String
    survey                 Survey                  @relation(fields: [surveyId], references: [id], onDelete: Cascade)
    answers                Json
    createdAt              DateTime                @default(now())
    membershipApplications MembershipApplication[]

    @@id([memberId, surveyId])
    @@unique([memberId, surveyId])
}

model Album {
    id       String @id @default(cuid())
    memberId String
    member   Member @relation(fields: [memberId], references: [id], onDelete: Cascade)
    images   Json
}

model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}

enum ApplicationStatus {
    APPROVED
    DECLINED
    BLOCKED
    PENDING
}

model LocationState {
    id     String         @id @default(cuid())
    name   String         @unique
    cities LocationCity[]
}

model LocationCity {
    id      String        @id @default(cuid())
    name    String
    stateId String
    state   LocationState @relation(fields: [stateId], references: [id], onDelete: Cascade)
    members Member[]

    @@unique([name, stateId])
}
